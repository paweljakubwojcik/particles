{"version":3,"sources":["App.tsx","index.js"],"names":["Particle","position","velocity","x","y","size","color","id","this","toString","Particles","nextAvaibleIndex","ctx","beginPath","arc","Math","PI","fillStyle","fill","Object","values","App","graphicContext","useRef","useEffect","current","canvasElement","canvas","width","height","resize","window","innerWidth","innerHeight","addEventListener","i","random","e","getParticleById","delete","mouseFollower","mouseParticles","quantity","floor","push","cos","sin","setTimeout","forEach","particle","connect","getAllParticles","j","length","particle2","pow","strokeStyle","lineWidth","moveTo","lineTo","stroke","animate","clearRect","update","draw","requestAnimationFrame","className","ref","reference","getContext","style","top","left","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3393db8.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\nimport './App.css'\n\ntype Vector = {\n    x: number\n    y: number\n}\n\ntype ParticleConfig = {\n    position: Vector\n    velocity?: Vector\n    size?: number\n    color?: string\n    id?: string | number\n}\nclass Particle {\n    private static Particles: { [key: string]: Particle } = {}\n    private static nextAvaibleIndex = 0\n    position: Vector\n    velocity: Vector\n    color: string\n    size: number\n    id: string\n\n    constructor({\n        position,\n        velocity = { x: 0, y: 0 },\n        size = 2,\n        color = '#ffffff',\n        id,\n    }: ParticleConfig) {\n        this.position = position\n        this.velocity = velocity\n        this.size = size\n        this.color = color\n        if (id) {\n            this.id = id.toString()\n        } else {\n            while (Particle.Particles[Particle.nextAvaibleIndex.toString()]) {\n                Particle.nextAvaibleIndex++\n            }\n            this.id = Particle.nextAvaibleIndex.toString()\n        }\n        Particle.Particles[this.id] = this\n    }\n\n    draw(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath()\n        ctx.arc(this.position.x, this.position.y, this.size, 0, Math.PI * 2)\n        ctx.fillStyle = this.color\n        ctx.fill()\n    }\n\n    update() {\n        this.position.x += this.velocity.x\n        this.position.y += this.velocity.y\n    }\n\n    delete() {\n        delete Particle.Particles[this.id]\n    }\n\n    static getParticleById(id: string | number) {\n        return Particle.Particles[id.toString()]\n    }\n\n    static getAllParticles() {\n        return Object.values(Particle.Particles)\n    }\n}\n\nfunction App() {\n    const graphicContext = useRef<CanvasRenderingContext2D | null>(null)\n    const particlesQuantity = 100\n\n    useEffect(() => {\n        if (graphicContext.current) {\n            const ctx = graphicContext.current\n            const canvasElement = graphicContext.current.canvas\n            let { width, height } = ctx.canvas\n\n            const resize = () => {\n                if (graphicContext.current) {\n                    graphicContext.current.canvas.width = window.innerWidth\n                    graphicContext.current.canvas.height = window.innerHeight\n                    height = window.innerHeight\n                    width = window.innerWidth\n                }\n            }\n\n            window.addEventListener('resize', resize)\n            resize()\n\n            for (let i = 0; i < particlesQuantity; i++) {\n                new Particle({\n                    position: {\n                        x: Math.random() * width,\n                        y: Math.random() * height,\n                    },\n                    velocity: {\n                        x: Math.random() * 2 - 1,\n                        y: Math.random() * 2 - 1,\n                    },\n                })\n            }\n\n            canvasElement.addEventListener('mouseleave', (e) => {\n                Particle.getParticleById('mouseFollower').delete()\n            })\n\n            canvasElement.addEventListener('mousemove', (e) => {\n                const mouseFollower = Particle.getParticleById('mouseFollower')\n                if (mouseFollower) {\n                    mouseFollower.position.x = e.x\n                    mouseFollower.position.y = e.y\n                } else {\n                    new Particle({\n                        position: {\n                            x: 0,\n                            y: 0,\n                        },\n                        id: 'mouseFollower',\n                        size: 1,\n                    })\n                }\n            })\n\n            canvasElement.addEventListener('click', (e) => {\n                let mouseParticles: Array<Particle> = []\n                let quantity = Math.floor(Math.random() * 7) + 3\n                for (let i = 0; i < quantity; i++) {\n                    mouseParticles.push(\n                        new Particle({\n                            position: { x: e.x, y: e.y },\n                            velocity: {\n                                x: 2 * Math.cos((i * Math.PI * 2) / quantity),\n                                y: 2 * Math.sin((i * Math.PI * 2) / quantity),\n                            },\n                        })\n                    )\n                }\n\n                setTimeout(() => {\n                    mouseParticles.forEach((particle) => {\n                        particle.delete()\n                    })\n                }, 1500)\n            })\n\n            const animate = () => {\n                ctx.clearRect(0, 0, width, height)\n\n                Particle.getAllParticles().forEach((particle) => {\n                    if (particle.position.x > width || particle.position.x < 0) {\n                        particle.velocity.x *= -1\n                    }\n                    if (particle.position.y > height || particle.position.y < 0) {\n                        particle.velocity.y *= -1\n                    }\n                    particle.update()\n                    particle.draw(ctx)\n                })\n                connect()\n                requestAnimationFrame(animate)\n            }\n\n            const connect = () => {\n                Particle.getAllParticles().forEach((particle, i) => {\n                    for (let j = i; j < Particle.getAllParticles().length; j++) {\n                        const particle2 = Particle.getAllParticles()[j]\n                        const distance =\n                            Math.pow(particle.position.x - particle2.position.x, 2) +\n                            Math.pow(particle.position.y - particle2.position.y, 2)\n                        if (distance < (width * height) / 100) {\n                            ctx.strokeStyle = '#dddddd'\n                            ctx.lineWidth = 1\n                            ctx.beginPath()\n                            ctx.moveTo(particle.position.x, particle.position.y)\n                            ctx.lineTo(particle2.position.x, particle2.position.y)\n                            ctx.stroke()\n                        }\n                    }\n                })\n            }\n\n            animate()\n        }\n    }, [graphicContext, particlesQuantity])\n\n    return (\n        <div className=\"App\">\n            <canvas\n                ref={(reference: HTMLCanvasElement) => {\n                    graphicContext.current = reference.getContext('2d')\n                }}\n                style={{\n                    position: 'absolute',\n                    width: '100vw',\n                    height: '100vh',\n                    top: 0,\n                    left: 0,\n                }}\n            />\n            <h1>Particles.</h1>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}